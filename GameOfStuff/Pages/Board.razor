@page "/board/{GameID}"
@using Microsoft.AspNetCore.SignalR.Client
@using GameOfStuff.Services
@using GameOfStuff.Data
@inject NavigationManager NavManager
@inject GameService GameService
@inject AppState AppState

<h3>Session Name: <strong>@GameModel.GameID</strong></h3>
<ExeceptionMessage />
@if (Loaded)
{
    @if (LoggedIn)
    {
        <div class="card" id="QuestionCard">
            <div class="card-header">
                Question
            </div>
            <div class="card-body">
                <blockquote class="blockquote mb-0">
                    <p>@GameModel.Question</p>
                </blockquote>
            </div>
        </div>
        @if (GameModel?.Players != null)
        {
            <div class="card mt-3" id="AnswerCard">
                <div class="card-header">
                    Answers
                </div>
                <ul class="list-group list-group-flush">
                    @if (!GameModel.Players.Any(p => p.Answer != string.Empty))
                    {
                        <li>No answers submitted yet. Please submit an answer below.</li>
                    }
                    else
                    {
                        if (RevealAnswers)
                        {
                            foreach (Player player in GameModel.Players)
                            {
                                if (!string.IsNullOrEmpty(player.Answer))
                                {
                                    <li class="list-group-item text-white @(player.IsOut ? "bg-danger" : "bg-success")" @onclick="(() => HandlePlayerClick(player.PlayerID))">
                                        @player.Answer
                                    </li>
                                }
                            }
                        }
                        else
                        {
                            <li>Waiting for all players(@GameModel.Players.Count) to submit answers.</li>
                        }
                    }
                </ul>
            </div>
        }
        <div class="card mt-3">
            <div class="card-header">
                Submit an answer
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <input type="text" name="answer" class="form-control" @bind-value="UserAnswer" placeholder="Write an answer..." />
                    </div>
                    <div class="form-group col-md-6">
                        <button type="submit" class="btn btn-primary" @onclick="@(() => SubmitAnswer())">Submit Answer</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card mt-3">
            <div class="card-header">
                Please login
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <input type="text" name="PlayerID" class="form-control" @bind-value="PlayerID" placeholder="Please enter your name..." />
                    </div>
                    <div class="form-group col-md-6">
                        <input type="password" name="Password" class="form-control" @bind-value="Password" placeholder="Please enter password to join game..." />
                    </div>
                </div>
                <button type="submit" class="btn btn-primary" @onclick="@(() => JoinGame())">Join Game</button>
            </div>
        </div>
    }

}

@code {

    [Parameter]
    public string GameID { get; set; }
    private bool Loaded { get; set; } = false;
    private string PlayerID { get; set; }
    private string Password { get; set; }
    private Game GameModel { get; set; }
    private string UserAnswer { get; set; }
    private bool LoggedIn { get; set; } = false;
    private bool RevealAnswers { get; set; } = false;
    public string Validation { get; set; }

    HubConnection connection;

    protected async override Task OnInitializedAsync()
    {
        await UpdateBoard();

        if (connection == null)
        {
            connection = new HubConnectionBuilder()
                .WithUrl($"{NavManager.BaseUri}gamehub")
                .WithAutomaticReconnect()
                .Build();

            connection.On("GameUpdate", UpdateBoard);

            await connection.StartAsync();
        }

    }

    public async Task JoinGame()
    {
        if (string.IsNullOrEmpty(PlayerID))
        {
            Validation = "Please enter a username";
            return;
        }
        try
        {
            GameModel = await GameService.JoinGame(GameID, Password, PlayerID);
            LoggedIn = true;
        }
        catch (Exception ex)
        {
            AppState.ExceptionAlert("Error", ex.Message, true);
        }
        await connection.InvokeAsync("JoinGroup", GameID);
    }

    public async Task UpdateBoard()
    {
        GameModel = await GameService.GetGameModel(GameID);
        if (GameModel == null)
        {
            Loaded = false;
        }
        else
        {
            RevealAnswers = GameService.RevealAnswers(GameModel);
            Loaded = true;
        }

        StateHasChanged();
    }

    public async Task SubmitAnswer()
    {
        try
        {
            GameModel = await GameService.SubmitAnswer(GameID, PlayerID, UserAnswer);
            await UpdatePlayers();
        }
        catch (Exception ex)
        {
            AppState.ExceptionAlert("Error", ex.Message, true);
        }

    }

    public async Task UpdatePlayers()
    {
        await connection.InvokeAsync("UpdatePlayers", GameModel.GameID);
        StateHasChanged();
    }

    public async Task HandlePlayerClick(string playerID)
    {
        try
        {
            GameModel = await GameService.AnswerToggle(GameModel.GameID, playerID);
            await UpdatePlayers();
        }
        catch (Exception ex)
        {
            AppState.ExceptionAlert("Error", ex.Message, true);
        }
    }

}
